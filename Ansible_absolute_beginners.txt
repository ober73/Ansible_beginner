Ansible Beginners

Ansible Inventory

ssh or powershell remoting (windows)

agentless


you can use aliases

web ansible_host=server1.company.com ansible_connetion=ssh ansible_user=root

or localhost

or winrm 

setup ssh key 


ANSIBLE PLAYBOOKS

each play is a dictionary

name:
hosts:
tasks:

tasks are an array or list so you can not move around

host in playbook must be matched in the inventory

the task are modules


LAB

User: bob
Password: caleston123


ANSIBLE MODULES

script module ansible has the script locally and can run remote, no need to copy it over to other servers

service: name=postgresql state=started

lininfile is used to find a line in a file and replace it or add it if it is not there

free_form parameter

ansible-doc to see info about modules

The following two statements are true about the lineinfile Ansible module.


A. It only adds the given line in file if that line doesn't exist in that file.

D. It keeps the existing lines as well and add a new given line in the file.



Example inlinefile

---
- name: 'hosts'
  hosts: all
  become: yes
  tasks:
    - name: 'Execute a script'
      script: '/tmp/install_script.sh'    
    - name: 'Start httpd service'
      service:
        name: 'httpd'
        state: 'started'
    - name: 'Add line to file'
      lineinfile: 
        path: /var/www/html/index.html
        line: "Welcome to ansible-beginning course"
        create: true
        
        
EXAMPLE create new user:

---
- name: 'hosts'
  hosts: all
  become: yes
  tasks:
    - name: 'Execute a script'
      script: '/tmp/install_script.sh'
    - name: 'Start httpd service'
      service:
        name: 'httpd'
        state: 'started'
    - name: "Update /var/www/html/index.html"
      lineinfile:
        path: /var/www/html/index.html
        line: "Welcome to ansible-beginning course"
        create: true
    - name: 'Add new user'
      user: 
        name: 'web_user'
        uid: 1040
        group: 'developers'
        
        
VARIABLES

to use a variable enclose in curly brackets 
'nameserver {{ dns_server }}'


you can put variables into a file using Jinja2 Templating

{{   }}

CONDITIONALS, LOOPS & ROLES

Ansible Conditionals

conditional statements help when for example installing a package on all systems i.e. centos or debian

Conditional - When 

EX:

when: ansible_os_family == "Debian"

and 

or 

EX:

---
- name: Install Sofware
  host: all
  vars:
    packages:
      - name: nginx
        required: True
      - name: mysql
        required: True
      - name: apache
        required: False
  tasks:
  - name: Install "{{ item.name }} on Debian
    apt:
      name: "{{ item.name }}"
      state: present
      
  loop: "{{ packages }}"
  
Conditionals & Register

EX:

---

- name: Check the status of a service and email if it is down
  hosts: localhost
  tasks:
    - command: service httpd status
      register: result
      
    - mail:
        to: admin@company.com
        subject: Service Alert
        body: Httpd Service is down
        when: result.stout.find('down') !=-1
        
        
        
ANSIBLE LOOPS

to pass in 2 values use and array of dictionaries

EX: 
-
  name: Create users
  hosts: localhost
  tasks:
    - user: name = '{{ item.name }}' state=present uid= '{{ item.uid }}'

    loop:
      - name: joe
        uid: 1010
      - name: george
        uid: 1011
        
you can also use the with_* for loops

with_* can be used with lookup plugins   


EX:

---
- name: 'Install required packages'
  hosts: localhost
  become: yes
  vars:
    packages:
      - httpd
      - make
      - vim
  tasks:
    - yum:
        name: '{{ item }}'
        state: present
      with_items: '{{ packages }}'
      
      
ANSIBLE ROLES

make your work re-usable

roles also help organize your tasks

ansible_galaxy where you can find roles from other users

ansible galaxy has a tool that can help you create a role

ansible-galazy inint mysql 

/etc/ansible/roles

ansible-galaxy search mysql

ansible-galazy install geoff.mysql

ansible-galazy list

ansible-config dump | grep ROLE


QUIZ 

ansible.cfg

[defaults]
host_key_checking = false


inventory

node01 ansible_host=node01 ansible_ssh_pass=caleston123

ansible -i inventory node01 -m ping -v


alias



groups

[web_nodes]
node01
node02



inventory_table

#Web Servers
web_node1 ansible_host=web01.xyz.com ansible_connection=winrm ansible_user=administrator ansible_password=Win$Pass
web_node2 ansible_host=web02.xyz.com ansible_connection=winrm ansible_user=administrator ansible_password=Win$Pass
web_node3 ansible_host=web03.xyz.com ansible_connection=winrm ansible_user=administrator ansible_password=Win$Pass

#DB Servers
sql_db1 ansible_host=sql01.xyz.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Lin$Pass
sql_db2 ansible_host=sql02.xyz.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Lin$Pass

#Groups
[db_nodes]
sql_db1
sql_db2

[web_nodes]
web_node1
web_node2
web_node3

[boston_nodes]
sql_db1
web_node1

[dallas_nodes]
sql_db2
web_node2
web_node3

[us_nodes:children]
boston_nodes
dallas_nodes


---
- hosts: node01
  become: true
  tasks:
    - name: create a file
      copy:
        dest: /opt/file.txt
        content: "This file is created by Ansible!"
        
        
---
- hosts: all
  become: true
  tasks:
    - copy:
        src:  /usr/src/blog/index.html
        dest: /opt/blog
        remote_src: yes
        
        
        
     
        





